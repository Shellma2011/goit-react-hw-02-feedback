{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["SectionStyle","styled","section","TitleStyle","h2","Section","title","children","ButtonStyle","button","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","onClick","MessageStyle","p","Notification","message","StatisticsListStyle","ul","StatisticsItemStyle","li","Statistics","total","positivePercentage","entries","value","App","state","good","neutral","bad","option","setState","prevState","values","this","reduce","acc","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAGMA,EAAeC,IAAOC,QAAV,iUAiBZC,EAAaF,IAAOG,GAAV,qFAMD,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,eAACP,EAAD,WACG,cAACG,EAAD,UAAaG,IACbC,KC3BP,I,EAAMC,EAAcP,IAAOQ,OAAV,qXAiBF,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,cAACR,EAAD,CAAuBS,QAAS,kBAAML,EAAgBI,IAAtD,SACGA,GADeA,QCrB1B,IAAME,EAAejB,IAAOkB,EAAV,4QAoBHC,I,IAAAA,EARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,cAACH,EAAD,UAAeG,K,QCblBC,EAAsBrB,IAAOsB,GAAV,0LAUnBC,EAAsBvB,IAAOwB,GAAV,mTAeV,SAASC,EAAT,GAA6D,IAAvCf,EAAsC,EAAtCA,QAASgB,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBACnD,OACE,eAACN,EAAD,WACGT,OAAOgB,QAAQlB,GAASI,KAAI,mCAAEC,EAAF,KAAOc,EAAP,YAC3B,eAACN,EAAD,WACGR,EADH,KACUc,IADgBd,MAI5B,eAACQ,EAAD,qBAA6BG,KAC7B,eAACH,EAAD,iCAAyCI,EAAzC,W,UC9BAG,E,4MACJC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPvB,gBAAkB,SAAAwB,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAASE,EAAUF,GAAU,O,wDAGlC,WACE,OAAOvB,OAAO0B,OAAOC,KAAKR,OAAOS,QAAO,SAACC,EAAKZ,GAAN,OAAgBY,EAAMZ,IAAO,K,6CAEvE,WACE,OAAOa,KAAKC,MAAOJ,KAAKR,MAAMC,KAAOO,KAAKK,qBAAwB,O,oBAEpE,WACE,OACE,qCACE,cAACxC,EAAD,CAASC,MAAM,wBAAf,SACE,cAACI,EAAD,CAAiBC,QAAS6B,KAAKR,MAAOpB,gBAAiB4B,KAAK5B,oBAE9D,cAACP,EAAD,CAASC,MAAM,aAAf,SACiC,IAA9BkC,KAAKK,qBACJ,cAAC,EAAD,CAAcxB,QAAQ,yBAEtB,cAACK,EAAD,CACEf,QAAS6B,KAAKR,MACdL,MAAOa,KAAKK,qBACZjB,mBAAoBY,KAAKM,6C,GA9BrBC,aAuCHhB,IC1CfiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.87d50447.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst SectionStyle = styled.section`\n  padding: 20px;\n  text-align: center;\n\n  text-align: center;\n  width: 400px;\n  margin: 30px auto;\n\n  border: 1px solid grey;\n  border-radius: 2%;\n\n  font-family: 'Helvetica Neue', Helvetica, Arial;\n  background: white;\n  box-shadow: -1px 15px 30px -12px black;\n  z-index: 9999;\n`;\n\nconst TitleStyle = styled.h2`\n  padding: 10px;\n  font-size: 24px;\n  color: #5c6368;\n`;\n\nexport default function Section({ title, children }) {\n  return (\n    <SectionStyle>\n      {<TitleStyle>{title}</TitleStyle>}\n      {children}\n    </SectionStyle>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst ButtonStyle = styled.button`\n  border: 1px solid grey;\n  border-radius: 2%;\n  width: 100px;\n  padding: 5px 15px;\n  background-color: teal;\n  color: #fff;\n  font-weight: 500;\n  margin-left: 5px;\n  margin-right: 5px;\n  font-family: inherit;\n  cursor: pointer;\n  outline: none;\n  box-shadow: 1px 2px 2px 0 rgb(0 0 0 / 0.5);\n  transition: box-shadow 250ms linear;\n`;\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <>\n      {Object.keys(options).map(key => (\n        <ButtonStyle key={key} onClick={() => onLeaveFeedback(key)}>\n          {key}\n        </ButtonStyle>\n      ))}\n    </>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst MessageStyle = styled.p`\n  padding: 20px;\n  margin: 0px auto;\n  background-color: teal;\n  border: 1px solid grey;\n  border-radius: 2%;\n  box-shadow: 1px 2px 2px 0 rgb(0 0 0 / 0.5);\n  transition: box-shadow 250ms linear;\n  color: white;\n  font-weight: 700;\n`;\n\nfunction Notification({ message }) {\n  return <MessageStyle>{message}</MessageStyle>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StatisticsListStyle = styled.ul`\n  list-style-type: none;\n  padding: 0px;\n  margin: 0px;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  color: #5c6368;\n`;\n\nconst StatisticsItemStyle = styled.li`\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n  display: flex;\n\n  :nth-last-child(-n + 2) {\n    background-color: teal;\n    color: white;\n    font-weight: 700;\n    box-shadow: 1px 2px 2px 0 rgb(0 0 0 / 0.5);\n    transition: box-shadow 250ms linear;\n  }\n`;\n\nexport default function Statistics({ options, total, positivePercentage }) {\n  return (\n    <StatisticsListStyle>\n      {Object.entries(options).map(([key, value]) => (\n        <StatisticsItemStyle key={key}>\n          {key}: {value}\n        </StatisticsItemStyle>\n      ))}\n      <StatisticsItemStyle>Total: {total}</StatisticsItemStyle>\n      <StatisticsItemStyle>Positive feedback: {positivePercentage} %</StatisticsItemStyle>\n    </StatisticsListStyle>\n  );\n}\n\nStatistics.propTypes = {\n  options: PropTypes.object.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\nimport Statistics from './components/Statistics';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  onLeaveFeedback = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n  countTotalFeedback() {\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  }\n  countPositiveFeedbackPercentage() {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  }\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"There is no feedback\" />\n          ) : (\n            <Statistics\n              options={this.state}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}